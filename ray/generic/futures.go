// Generated file. DO NOT EDIT.
//
// This file was generated by `python3 gen_futures.py`.
package generic

import (
	"errors"

	"github.com/ray4go/go-ray/ray"
)

// FutureN is a future that represents the result of a function call with N returns.

// Future0

type Future0 struct {
	obj *ray.ObjectRef
}

func (f *Future0) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future0) Get() error {
	_, err := f.obj.GetAll()
	return err
}

// Future1

type Future1[T any] struct {
	obj *ray.ObjectRef
}

func (f *Future1[T]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future1[T]) Get() (T, error) {
	r, err := f.obj.GetAll()
	return r[0].(T), err
}

type FutureExt1 struct {
	Future1[error]
}

func (f *FutureExt1) Result() error {
	bizErr, rayErr := f.Get()
	return errors.Join(rayErr, bizErr)
}

// Future2

type Future2[T0 any, T1 any] struct {
	obj *ray.ObjectRef
}

func (f *Future2[T0, T1]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future2[T0, T1]) Get() (T0, T1, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), err
}

type FutureExt2[T0 any, T1 any] struct {
	Future2[T0, error]
}

func (f *FutureExt2[T0, T1]) Result() (T0, error) {
	r0, bizErr, rayErr := f.Get()
	return r0, errors.Join(bizErr, rayErr)
}

// Future3

type Future3[T0 any, T1 any, T2 any] struct {
	obj *ray.ObjectRef
}

func (f *Future3[T0, T1, T2]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future3[T0, T1, T2]) Get() (T0, T1, T2, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), err
}

type FutureExt3[T0 any, T1 any, T2 any] struct {
	Future3[T0, T1, error]
}

func (f *FutureExt3[T0, T1, T2]) Result() (T0, T1, error) {
	r0, r1, bizErr, rayErr := f.Get()
	return r0, r1, errors.Join(bizErr, rayErr)
}

// Future4

type Future4[T0 any, T1 any, T2 any, T3 any] struct {
	obj *ray.ObjectRef
}

func (f *Future4[T0, T1, T2, T3]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future4[T0, T1, T2, T3]) Get() (T0, T1, T2, T3, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), err
}

type FutureExt4[T0 any, T1 any, T2 any, T3 any] struct {
	Future4[T0, T1, T2, error]
}

func (f *FutureExt4[T0, T1, T2, T3]) Result() (T0, T1, T2, error) {
	r0, r1, r2, bizErr, rayErr := f.Get()
	return r0, r1, r2, errors.Join(bizErr, rayErr)
}

// Future5

type Future5[T0 any, T1 any, T2 any, T3 any, T4 any] struct {
	obj *ray.ObjectRef
}

func (f *Future5[T0, T1, T2, T3, T4]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future5[T0, T1, T2, T3, T4]) Get() (T0, T1, T2, T3, T4, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), err
}

type FutureExt5[T0 any, T1 any, T2 any, T3 any, T4 any] struct {
	Future5[T0, T1, T2, T3, error]
}

func (f *FutureExt5[T0, T1, T2, T3, T4]) Result() (T0, T1, T2, T3, error) {
	r0, r1, r2, r3, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, errors.Join(bizErr, rayErr)
}

// Future6

type Future6[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any] struct {
	obj *ray.ObjectRef
}

func (f *Future6[T0, T1, T2, T3, T4, T5]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future6[T0, T1, T2, T3, T4, T5]) Get() (T0, T1, T2, T3, T4, T5, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), err
}

type FutureExt6[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any] struct {
	Future6[T0, T1, T2, T3, T4, error]
}

func (f *FutureExt6[T0, T1, T2, T3, T4, T5]) Result() (T0, T1, T2, T3, T4, error) {
	r0, r1, r2, r3, r4, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, errors.Join(bizErr, rayErr)
}

// Future7

type Future7[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any] struct {
	obj *ray.ObjectRef
}

func (f *Future7[T0, T1, T2, T3, T4, T5, T6]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future7[T0, T1, T2, T3, T4, T5, T6]) Get() (T0, T1, T2, T3, T4, T5, T6, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), err
}

type FutureExt7[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any] struct {
	Future7[T0, T1, T2, T3, T4, T5, error]
}

func (f *FutureExt7[T0, T1, T2, T3, T4, T5, T6]) Result() (T0, T1, T2, T3, T4, T5, error) {
	r0, r1, r2, r3, r4, r5, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, errors.Join(bizErr, rayErr)
}

// Future8

type Future8[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any] struct {
	obj *ray.ObjectRef
}

func (f *Future8[T0, T1, T2, T3, T4, T5, T6, T7]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future8[T0, T1, T2, T3, T4, T5, T6, T7]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), err
}

type FutureExt8[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any] struct {
	Future8[T0, T1, T2, T3, T4, T5, T6, error]
}

func (f *FutureExt8[T0, T1, T2, T3, T4, T5, T6, T7]) Result() (T0, T1, T2, T3, T4, T5, T6, error) {
	r0, r1, r2, r3, r4, r5, r6, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, errors.Join(bizErr, rayErr)
}

// Future9

type Future9[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any] struct {
	obj *ray.ObjectRef
}

func (f *Future9[T0, T1, T2, T3, T4, T5, T6, T7, T8]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future9[T0, T1, T2, T3, T4, T5, T6, T7, T8]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), err
}

type FutureExt9[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any] struct {
	Future9[T0, T1, T2, T3, T4, T5, T6, T7, error]
}

func (f *FutureExt9[T0, T1, T2, T3, T4, T5, T6, T7, T8]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, errors.Join(bizErr, rayErr)
}

// Future10

type Future10[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any] struct {
	obj *ray.ObjectRef
}

func (f *Future10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), err
}

type FutureExt10[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any] struct {
	Future10[T0, T1, T2, T3, T4, T5, T6, T7, T8, error]
}

func (f *FutureExt10[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, errors.Join(bizErr, rayErr)
}

// Future11

type Future11[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any] struct {
	obj *ray.ObjectRef
}

func (f *Future11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), err
}

type FutureExt11[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any] struct {
	Future11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, error]
}

func (f *FutureExt11[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, errors.Join(bizErr, rayErr)
}

// Future12

type Future12[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any] struct {
	obj *ray.ObjectRef
}

func (f *Future12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), r[11].(T11), err
}

type FutureExt12[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any] struct {
	Future12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, error]
}

func (f *FutureExt12[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, errors.Join(bizErr, rayErr)
}

// Future13

type Future13[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any] struct {
	obj *ray.ObjectRef
}

func (f *Future13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), r[11].(T11), r[12].(T12), err
}

type FutureExt13[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any] struct {
	Future13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, error]
}

func (f *FutureExt13[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, errors.Join(bizErr, rayErr)
}

// Future14

type Future14[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any] struct {
	obj *ray.ObjectRef
}

func (f *Future14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), r[11].(T11), r[12].(T12), r[13].(T13), err
}

type FutureExt14[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any] struct {
	Future14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, error]
}

func (f *FutureExt14[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, errors.Join(bizErr, rayErr)
}

// Future15

type Future15[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any, T14 any] struct {
	obj *ray.ObjectRef
}

func (f *Future15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), r[11].(T11), r[12].(T12), r[13].(T13), r[14].(T14), err
}

type FutureExt15[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any, T14 any] struct {
	Future15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, error]
}

func (f *FutureExt15[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, errors.Join(bizErr, rayErr)
}

// Future16

type Future16[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any, T14 any, T15 any] struct {
	obj *ray.ObjectRef
}

func (f *Future16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) Get() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, error) {
	r, err := f.obj.GetAll()
	return r[0].(T0), r[1].(T1), r[2].(T2), r[3].(T3), r[4].(T4), r[5].(T5), r[6].(T6), r[7].(T7), r[8].(T8), r[9].(T9), r[10].(T10), r[11].(T11), r[12].(T12), r[13].(T13), r[14].(T14), r[15].(T15), err
}

type FutureExt16[T0 any, T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any, T11 any, T12 any, T13 any, T14 any, T15 any] struct {
	Future16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, error]
}

func (f *FutureExt16[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) Result() (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, error) {
	r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, bizErr, rayErr := f.Get()
	return r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, errors.Join(bizErr, rayErr)
}
