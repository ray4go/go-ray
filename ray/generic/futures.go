// Generated file. DO NOT EDIT.
//
// This file was generated by `python3 gen_futures.py`.
// FutureN is a future that represents the result of a ray remote function call with N returns.
package generic

import (
	"github.com/ray4go/go-ray/ray"
)

type Future0 struct {
	obj *ray.ObjectRef
}

func (f *Future0) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future0) Get() error {
	return ray.Get0(f.obj)
}

type Future1[T0 any] struct {
	obj *ray.ObjectRef
}

func (f *Future1[T0]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future1[T0]) Get() (T0, error) {
	return ray.Get1[T0](f.obj)
}

func (f *Future1[T0]) ObjectRef() *ray.ObjectRef {
	return f.obj
}

type Future2[T0 any, T1 any] struct {
	obj *ray.ObjectRef
}

func (f *Future2[T0, T1]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future2[T0, T1]) Get() (T0, T1, error) {
	return ray.Get2[T0, T1](f.obj)
}

type Future3[T0 any, T1 any, T2 any] struct {
	obj *ray.ObjectRef
}

func (f *Future3[T0, T1, T2]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future3[T0, T1, T2]) Get() (T0, T1, T2, error) {
	return ray.Get3[T0, T1, T2](f.obj)
}

type Future4[T0 any, T1 any, T2 any, T3 any] struct {
	obj *ray.ObjectRef
}

func (f *Future4[T0, T1, T2, T3]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future4[T0, T1, T2, T3]) Get() (T0, T1, T2, T3, error) {
	return ray.Get4[T0, T1, T2, T3](f.obj)
}

type Future5[T0 any, T1 any, T2 any, T3 any, T4 any] struct {
	obj *ray.ObjectRef
}

func (f *Future5[T0, T1, T2, T3, T4]) setObjectRef(obj *ray.ObjectRef) {
	f.obj = obj
}

func (f *Future5[T0, T1, T2, T3, T4]) Get() (T0, T1, T2, T3, T4, error) {
	return ray.Get5[T0, T1, T2, T3, T4](f.obj)
}
